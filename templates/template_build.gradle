def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "_PACKAGE_NAME_"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }


    signingConfigs {
        release {
            storeFile file(System.getenv("UPLOAD_KEYSTORE_FILE") ?: localProperties.getProperty("UPLOAD_KEYSTORE_FILE") ?: "upload-keystore.jks")
            keyAlias System.getenv("KEYSTORE_KEY_ALIAS") ?: localProperties.getProperty("KEYSTORE_KEY_ALIAS")
            keyPassword System.getenv("KEYSTORE_KEY_PASSWORD") ?: localProperties.getProperty("KEYSTORE_KEY_PASSWORD")
            storePassword System.getenv("KEYSTORE_STORE_PASSWORD") ?: localProperties.getProperty("KEYSTORE_STORE_PASSWORD")
        }
        debug {
            storeFile file("${project.rootDir.absolutePath}/debug.keystore")
            keyAlias "androiddebugkey"
            keyPassword "android"
            storePassword "android"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
            multiDexEnabled true
            testCoverageEnabled false
        }
    }

    flavorDimensions "environment"

    productFlavors {
        development {
            dimension "environment"
            resValue "string", "app_name", "_RAW_NAME_ - Alpha"
            applicationIdSuffix ".alpha"
            versionNameSuffix "-alpha"
        }
        staging {
            dimension "environment"
            resValue "string", "app_name", "_RAW_NAME_ - Beta"
            applicationIdSuffix ".beta"
            versionNameSuffix "-beta"
        }
        production {
            dimension "environment"
            resValue "string", "app_name", "_RAW_NAME_"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
